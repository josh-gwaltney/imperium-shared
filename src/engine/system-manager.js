/**
 * Imperium 4X (Shared) - System Manager
 * ===
 *
 * @module system
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////
import System from './system';

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
class SystemManager {

  ////////////////////////////////////////////////////////////////////////////////
  // Private Properties
  ////////////////////////////////////////////////////////////////////////////////
  _systems;

  ////////////////////////////////////////////////////////////////////////////////
  // Public Properties
  ////////////////////////////////////////////////////////////////////////////////

  constructor(config){
    this._systems = {};

    this._init(config);
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Public Methods
  ////////////////////////////////////////////////////////////////////////////////
  update(state){
    for(let key in this._systems){
      let system = this._systems[key];
      system.update(state);
    }
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Private Methods
  ////////////////////////////////////////////////////////////////////////////////
  _init(config){
    config.forEach((system) => {
      this._addSystem(system);
    })
  }

  _addSystem(template){
    if(!this._hasSystem(template.id)){
      let system = new template.constructor();
      this._systems[template.id] = system;
      return true;
    }
    return false;
  }

  _hasSystem(name){
    return name in this._systems;
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default SystemManager;