/**
 * Imperium 4X (Shared) - Ajax Service
 * ===
 *
 * @module ajaxService
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////
const METHOD = {
  DELETE: 'DELETE',
  GET: 'GET',
  HEAD: 'HEAD',
  PATCH: 'PATCH',
  POST: 'POST',
  PUT: 'PUT'
};

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
class AjaxService {

  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _xhr;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////

  constructor(){

  }

  ////////////////////////////////////////////////////////////////////////////////
  // Public Methods
  ////////////////////////////////////////////////////////////////////////////////
  delete(url){
    return this._send(METHOD.DELETE, url);
  }

  get(options){
    return this._send(METHOD.GET, options);
  }

  head(url){
    return this._send(METHOD.HEAD, url);
  }

  patch(url){
    return this._send(METHOD.PATCH, url);
  }

  post(options){
    return this._send(METHOD.POST, options);
  }

  put(url){
    return this._send(METHOD.PUT, url);
  }

  ////////////////////////////////////////////////////////////////////////////////
  // Private Methods
  ////////////////////////////////////////////////////////////////////////////////
  _send(method, options){
    return new Promise(function(resolve, reject) {
      let xhr = new XMLHttpRequest();

      xhr.open(method, options.url);

      for (let header in options.headers){
        let value = options.headers[header];

        xhr.setRequestHeader(header, value);
      }

      xhr.onload = function() {
        if (this.status >= 200 && this.status < 300) {
          resolve(xhr)
        } else {
          reject({
            status: this.status,
            statusText: xhr.statusText
          });
        }
      };

      xhr.onerror = function(){
        reject({
          status: this.status,
          statusText: xhr.statusText
        });
      };

      xhr.send(options.body);

    });
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default AjaxService;