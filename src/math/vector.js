/**
 * Imperium 4X (Shared) - Vector
 * ===
 *
 * @module vector
 */

////////////////////////////////////////////////////////////////////////////////
// Imports
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class
////////////////////////////////////////////////////////////////////////////////
class Vector {
  //////////////////////////////////////////////////////////////////////////////
  // Private Properties
  //////////////////////////////////////////////////////////////////////////////
  _x;
  _y;

  //////////////////////////////////////////////////////////////////////////////
  // Public Properties
  //////////////////////////////////////////////////////////////////////////////
  get x(){
    return this._x;
  }

  get y(){
    return this._y;
  }

  get angle(){
    return Math.atan2(this._x, this._y);
  }

  get magnitude(){
    return Math.sqrt(this._x * this._x + this._y * this._y);
  }

  constructor(x, y){
    this._x = x;
    this._y = y;
  }

  //////////////////////////////////////////////////////////////////////////////
  // Public Methods
  //////////////////////////////////////////////////////////////////////////////
  add(v2){
    let x = this._x + v2.x;
    let y = this._y + v2.y;
    return new Vector(x, y);
  }

  subtract(v2){
    let x = this._x - v2.x;
    let y = this._y - v2.y;
    return new Vector(x, y);
  }

  multiply(v2){
    let x = this._x * v2.x;
    let y = this._y * v2.y;
    return new Vector(x, y);
  }

  divide(v2){
    let x = this._x * v2.x;
    let y = this._y * v2.y;
    return new Vector(x, y);
  }

  //////////////////////////////////////////////////////////////////////////////
  // Private Methods
  //////////////////////////////////////////////////////////////////////////////

  //////////////////////////////////////////////////////////////////////////////
  // Static Methods
  //////////////////////////////////////////////////////////////////////////////
  static create(x, y){
    return new Vector(x, y);
  }
}

////////////////////////////////////////////////////////////////////////////////
// Exports
////////////////////////////////////////////////////////////////////////////////
export default Vector;